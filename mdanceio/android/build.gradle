plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.mozilla.rust-android-gradle.rust-android'
    id 'maven-publish'
}

android {
    ndkVersion rootProject.ext.build.ndkVersion
    compileSdkVersion rootProject.ext.build.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.build['minSdkVersion']
        targetSdkVersion rootProject.ext.build['targetSdkVersion']

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "LIBRARY_VERSION", "\"${rootProject.ext.library.version}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility rootProject.ext.build.jvmTargetCompatibility
        targetCompatibility rootProject.ext.build.jvmTargetCompatibility
    }

    kotlinOptions {
        jvmTarget = rootProject.ext.build.jvmTargetCompatibility
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    libraryVariants.all  { variant ->
        def uniffiGeneratedPath = "generated/source/uniffi/${variant.name}/java"
        def t = tasks.register("generate${variant.name.capitalize()}UniFFIBindings", Exec) {
            workingDir project.rootDir
            commandLine 'uniffi-bindgen', 'generate', "${project.projectDir}/../src/mdanceio.udl", '--language', 'kotlin', '--out-dir', "${buildDir}/${uniffiGeneratedPath}"
            outputs.dir "${buildDir}/${uniffiGeneratedPath}"
            // Re-generate if the interface definition changes.
            inputs.file "${project.projectDir}/../src/mdanceio.udl"
            // Re-generate if our uniffi-bindgen version changes.
            inputs.file "${project.rootDir}/Cargo.lock"
        }
        variant.registerJavaGeneratingTask(t.get(), new File(buildDir, uniffiGeneratedPath))
    }
}

cargo {
    module  = ".."       // Or whatever directory contains your Cargo.toml
    libname = "mdanceio"          // Or whatever matches Cargo.toml's [package] name.
    targets = ["x86","arm"]  // See bellow for a longer list of options
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    testImplementation "junit:junit:$junit_version"

    androidTestImplementation "androidx.test:runner:$androidx_test_version"
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

publishing {
    publications {
        aar(MavenPublication) {
            project.afterEvaluate {
                from components.release
            }
            artifact sourcesJar

            pom {
                groupId = rootProject.ext.library.groupId
                artifactId = "mdanceio-ar"
                description = "MikuMikuDance compatible implementation used in ArCore context"
                version = rootProject.ext.library.version
                packaging = "aar"

                license {
                    name = "MIT"
                    url = "https://github.com/ReaNAiveD/mdanceio/blob/master/LICENSE"
                }

                developers {
                    developer {
                        name = "NAiveD"
                        email = "nice-die@live.com"
                    }
                }

                scm {
                    connection = "https://github.com/ReaNAiveD/mdanceio.git"
                    developerConnection = "https://github.com/ReaNAiveD/mdanceio.git"
                    url = "https://github.com/ReaNAiveD/mdanceio"
                }
            }
        }
    }
}