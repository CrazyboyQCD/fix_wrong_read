name: Release

on:
  push:
    tags: [v0.*]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Run the python script
      run: python3 scripts/check_release_version.py

  # Single deploy job since we're just deploying
  deploy-web-demo:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: check-release

    env:
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Cache Rust
      uses: Swatinem/rust-cache@v1
      with:
        key: wasm-pack-web-demo-b

    - name: Build Wasm Pack
      run: wasm-pack build mdanceio --out-dir ../target/pkg

    - name: Build Wasm Pack with WebGL support
      run: wasm-pack build mdanceio --out-dir ../target/pkg-webgl --scope webgl-supports -- --features webgl

    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'npm'
        cache-dependency-path: mdance-demo/package-lock.json

    - name: Install Dependencies
      working-directory: ./mdance-demo
      run: npm install

    - name: Build Demo Pages
      working-directory: ./mdance-demo
      run: npm run build-pages

    - name: Setup Pages
      uses: actions/configure-pages@v2

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v1
      with:
        path: mdance-demo/build/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v1

  publish-crates:
    runs-on: ubuntu-latest
    needs: check-release

    env:
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Cache Rust
      uses: Swatinem/rust-cache@v1
      with:
        key: publish-crates-b

    - name: Publish nanoem package
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }} -p nanoem

    - name: Publish mdanceio package
      run: cargo publish --token ${{ secrets.CARGO_TOKEN }} -p mdanceio
  
  publish-npm:
    runs-on: ubuntu-latest
    needs: check-release

    env:
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install wasm-pack
      run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      
    - name: Cache Rust
      uses: Swatinem/rust-cache@v1
      with:
        key: publish-npm-b

    - name: Build Wasm Pack
      run: wasm-pack build mdanceio --out-dir ../target/pkg

    - name: Build Wasm Pack with WebGL support
      run: wasm-pack build mdanceio --out-dir ../target/pkg-webgl --scope webgl-supports -- --features webgl

    - name: Use Node.js 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        registry-url: 'https://registry.npmjs.org'
        cache: 'npm'
        cache-dependency-path: mdance-demo/package-lock.json

    - name: Publish mdanceio
      working-directory: ./target/pkg
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Publish mdanceio with WebGL supports
      working-directory: ./target/pkg-webgl
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-mvn:
    runs-on: ubuntu-latest
    needs: check-release

    env:
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 11
  
    - name: Publish to MavenCentral
      run: ./gradlew publishReleasePublicationToSonatypeRepository --max-workers 1 closeAndReleaseSonatypeStagingRepository
      env:
        OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
        OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
        SIGNING_KEY_ID: ${{ secrets.SIGNING_KEY_ID }}
        SIGNING_PASSWORD: ${{ secrets.SIGNING_PASSWORD }}
        SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        SONATYPE_STAGING_PROFILE_ID: ${{ secrets.SONATYPE_STAGING_PROFILE_ID }}
